CREATE SEQUENCE SEQ_USER;
CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_EMAIL VARCHAR2(255) UNIQUE NOT NULL,
	USER_PASSWORD VARCHAR2(255) NOT NULL,
	USER_ADDRESS VARCHAR2(255),
	USER_BIRTH DATE
);

CREATE SEQUENCE SEQ_POST;
CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(255) NOT NULL,
	POST_CONTENT VARCHAR2(255) NOT NULL,
	POST_CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	USER_ID NUMBER,
	CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

CREATE SEQUENCE SEQ_REPLY;
CREATE TABLE TBL_REPLY(
	ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
	REPLY_CONTENT VARCHAR(255) NOT NULL,
	USER_ID NUMBER,
	POST_ID NUMBER,
	CONSTRAINT FK_REPLY_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),	
	CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);

INSERT INTO TBL_USER 
VALUES(SEQ_USER.NEXTVAL, 'TPGUS', '1234', '경기도 구리시', '2000-05-15');
INSERT INTO TBL_USER 
VALUES(SEQ_USER.NEXTVAL, 'hgd4567', '9999', '서울시 용산구', '2001-07-07');
INSERT INTO TBL_USER 
VALUES(SEQ_USER.NEXTVAL, 'lss7890', '0000', '경기도 용인시', '1985-05-05');
INSERT INTO TBL_USER 
VALUES(SEQ_USER.NEXTVAL, 'jjy0001', '0001', '서울시 송파구', '1998-12-11');

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '내 및으로 다 따라와 -김동건-', '미안해~', 4);

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '나 장재영 탈주닌자', '장타치!', 4);

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '겸손을 모르는 남자 박세현', '코딩은 나의 삶', 2);

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '김영수 관종', '사람을 화나게 하는 법', 1);

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '사실은 공짜가 아니었어 -장덕준-', '카카오 뱅크 110-0002-1112', 3);

INSERT INTO TBL_POST(ID, POST_TITLE, POST_CONTENT , USER_ID)
VALUES(SEQ_POST.NEXTVAL, '서서 밀면? 서민아', '재영이 1조인척한다', 2);

SELECT *
FROM TBL_POST;

-- 댓글(CONTENT, USER_ID, POST_ID)
INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '너나 잘해 -박세현-', 3, 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '500원 내놔 -김영수-', 2, 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '내일 아침 커피 네가 사!', 2, 3);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '장타치! 상타치!', 1, 2);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '인정!', 1, 4);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '모른척~ ', 4, 5);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, 'SQLD 합격기원!', 3, 6);

SELECT * FROM TBL_POST;
SELECT * FROM TBL_REPLY;
SELECT * FROM TBL_USER;

SELECT *
FROM TBL_POST TP
JOIN TBL_USER TU
ON TP.USER_ID = TU.ID;

-- SELECT절에서 소속을 붙이자!
SELECT TP.*, TU.USER_EMAIL ,TU.USER_PASSWORD
FROM TBL_POST TP
JOIN TBL_USER TU
ON TP.USER_ID = TU.ID;

-- 7개행 조인한 결과에서 WHERE절을 사용시 성능적으로 떨어짐
SELECT *  
FROM TBL_REPLY TR
JOIN TBL_USER TU
ON TR.USER_ID = TU.ID 
JOIN TBL_POST TP 
ON TR.POST_ID = TP.ID
WHERE TR.USER_ID = 2;

-- 서브쿼리로 WHERE절 사용 후 조인하면 성능적으로 우수함
SELECT *
FROM (
	SELECT *
	FROM TBL_REPLY
	WHERE USER_ID = 2
) TR
JOIN TBL_USER TU 
ON TR.USER_ID = TU.ID
JOIN TBL_POST TP 
ON TR.POST_ID = TP.ID;

-- 게시글에서 '자'를 포함하고 있는 게시글을 작성한 유저의 EMAIL을 조회
SELECT TU.USER_EMAIL
FROM (
	SELECT *
	FROM TBL_POST
	WHERE POST_TITLE LIKE '%자%'
) TP
JOIN TBL_USER TU
ON TP.USER_ID = TU.ID;

-- 4번 유저가 작성한 게시글의 개수보다 게시글 개수가 작은 유저의 모든 작성글을 가져오기
SELECT * 
FROM (
	SELECT USER_ID, COUNT(USER_ID) 
	FROM TBL_POST
	GROUP BY USER_ID
	HAVING COUNT(USER_ID) < (
		SELECT COUNT(ID)  
		FROM TBL_POST
		WHERE USER_ID = 4
	) 
) UI
JOIN TBL_POST TP
ON TP.USER_ID = UI.USER_ID
JOIN TBL_USER TU
ON TP.USER_ID = TU.ID;


-- 

SELECT *
FROM TBL_REPLY TR;
-- 댓글이 1개보다 많이 달린 게시글 의 제목 조회하기

SELECT POST_TITLE 
FROM TBL_POST TP
JOIN (
	SELECT POST_ID , COUNT(POST_ID) 
	FROM TBL_REPLY TR
	GROUP BY POST_ID
	HAVING COUNT(POST_ID) > 1
) TR
ON TP.ID = TR.POST_ID;

--2) 평균 댓글 개수보다 많이 달린 게시글을 조회하고 그 게시글을 작성한 유저의 이메일을 조회하기

SELECT TU.USER_EMAIL, TP.POST_TITLE 
FROM TBL_USER TU
JOIN TBL_POST TP 
ON TU.ID = TP.USER_ID 
JOIN (
	SELECT POST_ID , COUNT(POST_ID)
	FROM TBL_REPLY TR
	GROUP BY POST_ID
	HAVING COUNT(POST_ID) > (
		SELECT AVG(COUNT(POST_ID))  AS CNT
		FROM TBL_REPLY
		GROUP BY POST_ID
	)
) AV
ON AV.POST_ID = TP.ID;










