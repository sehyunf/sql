-- 산술 연산자
SELECT 5 + 3 FROM DUAL;
SELECT 5 - 3 FROM DUAL;
SELECT 5 * 3 FROM DUAL;
SELECT 5 / 3 FROM DUAL;
SELECT MOD(5, 3) FROM DUAL;
-- "-", "+", 0

SELECT SIGN(-10) FROM DUAL;
SELECT SIGN(50) FROM DUAL;
SELECT SIGN(0) FROM DUAL;

-- NULL = NULL 은 공집합
-- NULL과 같은 데이터 조회
SELECT NULL 
FROM DUAL 
WHERE NULL IS NULL;

SELECT NULL 
FROM DUAL 
WHERE NULL IS NOT NULL;

-- 문자열 연산자(함수)
SELECT CONCAT('HELLO', 'WORLD')  FROM DUAL;
SELECT 'HELLO' || 'WORLD'  FROM DUAL;
SELECT LENGTH(CONCAT('HELLO', 'WORLD')) FROM DUAL;

-- SUBSTR('문자열', 시작인덱스, 시작인덱스부터 개수)
SELECT SUBSTR('HELLO' || 'WORLD', 5, 3) FROM DUAL;

CREATE SEQUENCE SEQ_MEMBER;
CREATE TABLE TBL_MEMBER(
	ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
	MEMBER_NAME VARCHAR2(255),
	MEMBER_AGE NUMBER
);

CREATE SEQUENCE SEQ_STUDENT;
CREATE TABLE TBL_STUDENT(
	ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_NAME VARCHAR(255),
	STUDENT_AGE NUMBER
);

INSERT INTO TBL_MEMBER 
VALUES(SEQ_MEMBER.NEXTVAL, '홍길동', 30);
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '장보고', 30);
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '이순신', 30);
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '홍길동', 10);
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '김철수', NULL);
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '김영희', NULL);

INSERT INTO TBL_STUDENT 
VALUES(SEQ_STUDENT.NEXTVAL, '홍길동', 30);
INSERT INTO TBL_STUDENT 
VALUES(SEQ_STUDENT .NEXTVAL, '장보고', 30);
INSERT INTO TBL_STUDENT 
VALUES(SEQ_STUDENT.NEXTVAL, '이순신', 30);
INSERT INTO TBL_STUDENT 
VALUES(SEQ_STUDENT.NEXTVAL, '홍길동', 10);

SELECT DISTINCT MEMBER_NAME, MEMBER_AGE
FROM TBL_MEMBER;

-- 합집합
SELECT * FROM TBL_MEMBER
UNION ALL
SELECT * FROM TBL_STUDENT;

-- 차집합
SELECT * FROM TBL_STUDENT
MINUS
SELECT * FROM TBL_MEMBER;

SELECT * FROM TBL_MEMBER
MINUS
SELECT * FROM TBL_STUDENT;

SELECT * FROM TBL_STUDENT
INTERSECT
SELECT * FROM TBL_MEMBER;

-- IS NULL, IS NOT NULL
SELECT *
FROM TBL_MEMBER
WHERE MEMBER_AGE IS NOT NULL;

SELECT *
FROM TBL_MEMBER
WHERE MEMBER_AGE IS NULL;

-- 문자열 함수

SELECT UPPER('Apple') FROM DUAL; 
SELECT LOWER('Apple') FROM DUAL; 
SELECT TRIM('     공백     ') FROM DUAL; 
SELECT REPLACE('   공백    공백    ', ' ', '') FROM DUAL;

-- INDEXOF
SELECT INSTR('MELLON', 'E') FROM DUAL;

-- 날짜 및 시간 함수
SELECT SYSDATE FROM DUAL;
SELECT CURRENT_DATE FROM DUAL;

-- ADD_MONTHS(DATE, 추가할 월)
SELECT ADD_MONTHS(SYSDATE, 4)FROM DUAL;

-- 일 차이
SELECT ABS( DATE '2025-04-25' - DATE '2025-04-30')FROM DUAL;

-- 1(일요일) -> 2 -> 3 -> 4 -> 5 -> 6 -> 7
SELECT NEXT_DAY(SYSDATE, 1) FROM DUAL;

-- TRUNC()
SELECT TRUNC(SYSDATE) FROM DUAL;

-- EXTRACT()
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'HH24') FROM DUAL; 
SELECT TO_CHAR(SYSDATE, 'MI') FROM DUAL; 
SELECT TO_CHAR(SYSDATE, 'SS') FROM DUAL; 

-- 형변환
SELECT CAST(10 AS VARCHAR2(255)) FROM DUAL;
SELECT CAST('10' AS NUMBER) FROM DUAL;
SELECT CAST('2025-02-27' AS DATE) FROM DUAL;
SELECT CAST(SYSDATE AS TIMESTAMP) FROM DUAL;

-- NULL 함수
SELECT * FROM TBL_MEMBER;
SELECT MEMBER_NAME, NVL(MEMBER_AGE, 0) FROM TBL_MEMBER;
SELECT MEMBER_NAME , MEMBER_AGE , NVL2(MEMBER_AGE, 100, 0) FROM TBL_MEMBER;
SELECT MEMBER_NAME , MEMBER_AGE , COALESCE(MEMBER_AGE, NULL, NULL, NULL, 100) FROM TBL_MEMBER;

-- 두 값이 같으면 NULL
SELECT MEMBER_NAME , MEMBER_AGE , NULLIF(MEMBER_AGE, 30) FROM TBL_MEMBER;

SELECT MEMBER_NAME, 
	NVL(
		CASE MEMBER_NAME
			WHEN '홍길동' THEN '대리'
			WHEN '이순신' THEN '과장'
			WHEN '김철수' THEN '사원'
			END, '인턴'
	) AS "직급"
FROM TBL_MEMBER;

CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(255),
	PRODUCT_PRICE NUMBER
);

SELECT * FROM TBL_PRODUCT;

INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '마우스', 10000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '키보드', 30000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '모니터', 30000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '컴퓨터', 300000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '마우스', 30000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '키보드', 45000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '모니터', 60000);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '컴퓨터', 1000000);

SELECT * FROM TBL_PRODUCT;

SELECT 
	RANK() OVER(
		PARTITION BY PRODUCT_NAME
		ORDER BY PRODUCT_PRICE DESC),
		SUM(PRODUCT_PRICE) OVER(PARTITION BY PRODUCT_NAME),
		PRODUCT_NAME,
		PRODUCT_PRICE
FROM TBL_PRODUCT;

SELECT PRODUCT_NAME FROM TBL_PRODUCT;

SELECT * FROM TBL_PRODUCT;

SELECT 
	FIRST_VALUE(PRODUCT_PRICE) OVER(ORDER BY PRODUCT_PRICE)
FROM TBL_PRODUCT;

SELECT 
	PRODUCT_PRICE,
	LAST_VALUE() (PRODUCT_PRICE) OVER(ORDER BY PRODUCT_PRICE ROWS SETREEN)
FROM TBL_PRODUCT;

-- ROLLUP
SELECT PRODUCT_NAME, PRODUCT_PRICE, SUM(PRODUCT_PRICE) OVER()
FROM TBL_PRODUCT
GROUP BY ROLLUP(PRODUCT_NAME, PRODUCT_PRICE);


SELECT PRODUCT_NAME, PRODUCT_PRICE, SUM(PRODUCT_PRICE) OVER(PARTITION BY PRODUCT_NAME)
FROM TBL_PRODUCT
GROUP BY ROLLUP(PRODUCT_NAME, PRODUCT_PRICE);